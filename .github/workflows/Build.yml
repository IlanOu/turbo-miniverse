name: âŒ› Build and Test Project 

permissions:
  contents: write

on:
    push:
      # Sequence of patterns matched against refs/tags
      tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  testRunner:
    name: ðŸ§ª Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
          
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-Test-Runner
          restore-keys: Library-
          
      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          testMode: all
          artifactsPath: TestResults
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test Results
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
          
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Results
          path: ${{ steps.tests.outputs.artifactsPath }}

  buildForAllSupportedPlatforms:
    name: ðŸ”¨ Build for ${{ matrix.targetPlatform }} âœ¨
    needs: testRunner
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targetPlatform:
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
        
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.2.0
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: "Turbo-Miniverse" 
          versioning: Tag

      - name: Zip the build
        run: |
            cd build/${{ matrix.targetPlatform }} && zip -r ../../Turbo-Miniverse-${{ matrix.targetPlatform }}.zip .

      - name: Upload the zipped build
        uses: actions/upload-artifact@v4
        with:
          name: Turbo-Miniverse-Zipped-${{ matrix.targetPlatform }}
          path: Turbo-Miniverse-${{ matrix.targetPlatform }}.zip

  release:
    name: ðŸš€ Create GitHub Release
    needs: buildForAllSupportedPlatforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+' | sed -n '2p')
          echo "Previous tag: $PREV_TAG"
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      - name: Generate changelog from commits
        id: generate_changelog
        run: |
          LOG=$(git log --pretty=format:"- %s" ${{ env.prev_tag }}..HEAD)
          echo "Changelog generated:"
          echo "$LOG"
          echo "Changelog<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: Test Results
          path: test-results

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: |
            ${{ env.Changelog }}
            
            [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false

      - name: Upload Assets to Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
